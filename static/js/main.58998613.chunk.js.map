{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","paddingTop","marginTop","children","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","error","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.58998613.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n       <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px', paddingTop: '20px', marginTop: '20px' }}>\r\n            { props.children }\r\n        </div> \r\n    );\r\n}\r\n \r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({id='0', name='leon', email='l@g.com'}) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br2 pa2 ma1 grow bw2 shadow-5'>\r\n            <img alt={`${name}`} src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import _ from 'lodash';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n    <div>\r\n       {\r\n            robots.map((user, i) => {\r\n            return  (<Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />);\r\n           })\r\n       }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n   return (\r\n    <div className='pa2'>\r\n        <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robot'\r\n            onChange={searchChange}\r\n        />\r\n    </div>\r\n   ); \r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError : false\r\n         }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError : true })\r\n    }\r\n\r\n    render() { \r\n        \r\n            if (this.props.hasError) {\r\n                return <h1> Hubo un error!. </h1>\r\n            }\r\n            return this.props.children\r\n        }\r\n         \r\n    }\r\n \r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    \r\n    componentDidMount () {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n\r\n    const { searchField, onSearchChange, robots, isPending, error } = this.props;\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      })\r\n\r\n    return error ?    \r\n    <h1 className=\"tc\">Error cargando datos de la API</h1> :\r\n        isPending ?\r\n         <h1 className=\"tc\">Loading</h1> :\r\n         (\r\n            <div className='tc'>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );     \r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign( {} , state, {searchField: action.payload} );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : false,\r\n    robots : [],\r\n    error : ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign( {}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign( {}, state, { robots: action.payload , isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign( {}, state, { error: action.payload , isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware ,logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}